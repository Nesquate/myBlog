<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>讓 Alert 音效徹底叫三聲</title>
    <url>/2019/09/c-alert-3times-beep.html</url>
    <content><![CDATA[<p>計算機概論實習課時遇到的問題。  </p>
<a id="more"></a>  

<p>教授出了一個題目，要讓電腦Alert三次的音效聲，這題目看起來很簡單。原本的程式碼大概如下：</p>
<p>但是電腦的運行速度真的是有夠快，這Alert三次很快就完成，所以實際上播出來的聲音就只有一次。  </p>
<p>雖然助教在閱改的時候依然是算對，不過課堂上有不少人想要解決這個問題，不過後來都不試了。  </p>
<p>我後來有查到一個方法，就給大家參考。  </p>
<p>方法就是－<strong>加入 sleep() 函數</strong>。  </p>
<p>加入 sleep () 函數之前要先引用標頭檔 windows.h (Windows) 或 unistd.h (Unix/Linux)。  </p>
<p>加上後來學到的while迴圈，於是程式碼就變成下列這樣：  </p>
<p>說明一下：  </p>
<ul>
<li><p>建立兩個整數變數，time代表次數，sleeptime代表延遲時間</p>
</li>
<li><p>建立while迴圈，讓他alert響三次</p>
</li>
<li><p>time &lt; 4 代表 while 迴圈跑三次</p>
</li>
<li><p>sleep ( sleeptime ); - 指定延遲秒數</p>
</li>
<li><p>time = time + 1; - 原本的次數加一次</p>
</li>
</ul>
<p>後來發現第三次的時候程式會延遲三秒才正式結束，為了解決這個問題，於是又對程式做了改寫：</p>
<p>程式碼意思就自己看了。</p>
<h3 id="後記：windows-h-的未解之謎"><a href="#後記：windows-h-的未解之謎" class="headerlink" title="後記：windows.h 的未解之謎"></a>後記：windows.h 的未解之謎</h3><p>一開始我是在實驗室的電腦使用 windows.h 的標頭檔來使用 sleep () 函數，發現可以正常運行。</p>
<p>於是後來就在自己的電腦上重現上述程式碼時就出現了幾個問題：</p>
<ul>
<li>Visual Studio 2019 打了之後會發生 sleep () 沒定義的狀況，後來去查了一下要用「Sleep ()」且「1000 = 1 s」，這跟我的印象完全不一樣啊……</li>
<li>後來就把Dev C++裝上去並且測試一下使用 windows.h 的狀況，發現依舊是沒定義，再度問號</li>
<li>最後是用了 unistd.h 解決（沒想到Windows底下也可以用？）</li>
</ul>
<p>後來想起來實驗室的電腦有裝Code::Blocks，難道是跟Complier與Windows的環境變數（PATH）有關係嗎？這我目前還沒有答案……。</p>
]]></content>
      <categories>
        <category>Programing</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Termux SSH 連線二三事</title>
    <url>/2020/02/termux-ssh.html</url>
    <content><![CDATA[<h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>安裝其實不難， <code>pkg install openssh</code> 或 <code>apt install openssh</code> 就好了。<br>然而其實也不用再做而外的設定，預設就是 <strong>密碼</strong> 和 <strong>私鑰</strong> 兩種都有開。</p>
<p>如果只是要用密碼登入，再輸入 <code>passwd</code> 指定密碼就可以了；<br>如果是要用私鑰登入，請繼續往下看。</p>
<p>(登入的部分也往下看)</p>
<a id="more"></a>

<h2 id="私鑰登入"><a href="#私鑰登入" class="headerlink" title="私鑰登入"></a>私鑰登入</h2><p>稍微整理了一下，流程大概是：</p>
<h3 id="產生私鑰"><a href="#產生私鑰" class="headerlink" title="產生私鑰"></a>產生私鑰</h3><p>這部分只要打 <code>ssh-keygen</code> 就好了</p>
<h3 id="信任私鑰"><a href="#信任私鑰" class="headerlink" title="信任私鑰"></a>信任私鑰</h3><p>這邊打以下指令就好</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line">chmod 600 ~/.ssh/authorized_keys</span><br><span class="line">chmod 700 ~/.ssh</span><br></pre></td></tr></table></figure>
<p>這樣私鑰的部分就解決了。你可以把 <code>id_rsa.pub</code> 和 <code>id_rsa</code> 複製到電腦上。<br>如果有 root 的話這邊應該是沒什麼問題，如果沒有的話…自己想辦法複製到 <code>/sdcard</code> 上 (用指令)。</p>
<h2 id="登入"><a href="#登入" class="headerlink" title="登入"></a>登入</h2><p>登入有幾個要注意的事情：</p>
<ol>
<li>Termux 的 SSH Port 為 <strong>8022</strong> ，沒錯不是 22 ，這讓我一度以為自己的設定哪裡有問題。</li>
<li>注意網路環境，有些網路環境會把所有的 Port 鎖光光。</li>
</ol>
<p>登入之前只要先在 Termux 輸入 <code>sshd</code><br>最後再用相關軟體登入就好了 (這裡使用 MobaXterm)</p>
<p><img src="/images/posts/termux-ssh/termux-ssh-mobaxterm.png" alt="ssh-termux"></p>
<p>如果要停止 SSH 服務，只要輸入 <code>pkill sshd</code> 就行；<br>如果要在啟動 Termux 時自動啟動 SSH 服務，請善用 Shell 的設定檔，如 bash 的 <code>.bashrc</code> 或 zsh 的 <code>.zshrc</code> 。</p>
<h2 id="參考來源"><a href="#參考來源" class="headerlink" title="參考來源"></a>參考來源</h2><ul>
<li><a href="http://blog.lujun9972.win/blog/2018/01/24/%E4%BD%BF%E7%94%A8termux%E6%8A%8Aandroid%E6%89%8B%E6%9C%BA%E5%8F%98%E6%88%90ssh%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="noopener">使用Termux把Android手机变成SSH服务器 - 暗无天日</a></li>
<li><a href="https://www.arthurtoday.com/2017/04/termux-install-and-config-ssh-server.html" target="_blank" rel="noopener">Termux 設定SSH Server - 阿舍的隨手記記、隨手寫寫…</a></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Termux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04 最小安裝筆記</title>
    <url>/2020/04/ubuntu-mini.html</url>
    <content><![CDATA[<h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><ol>
<li><p>最小安裝<strong>需要使用到網路</strong>，你有有線網路用有線，無線網路用無線，沒有你就掰掰。<br>因為要連網，所以先確定好網卡驅動是否能夠在 mini 安裝環境下使用。</p>
</li>
<li><p>最小安裝難免在後面安裝其他程式的時候會有套件缺失的問題（最小安裝的套件會少很多），<br>不能接受就迴避ㄅ。</p>
</li>
<li><p>如果 Ubuntu 的最小安裝你都無法接受，<strong>那請你千萬別碰Arch Linux</strong>，因為它超麻煩</p>
</li>
</ol>
<a id="more"></a>

<h2 id="為什麼要做-Ubuntu-最小安裝？"><a href="#為什麼要做-Ubuntu-最小安裝？" class="headerlink" title="為什麼要做 Ubuntu 最小安裝？"></a>為什麼要做 Ubuntu 最小安裝？</h2><p>自己的理由 :</p>
<ul>
<li><del>反正我很閒</del> / <del>卑鄙源之助</del></li>
<li>練功</li>
<li>Ubuntu 沒精簡真的太肥，選了最小安裝也是肥，<del>雖然我自己最小安裝裝起來好像也很肥就是了</del></li>
<li>爽感（無誤）</li>
<li>我不想用 tasksel …</li>
</ul>
<h2 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h2><p>首先去下載<a href="https://help.ubuntu.com/community/Installation/MinimalCD" target="_blank" rel="noopener">映像檔</a>，然後想辦法用到 USB 裡面去</p>
<ul>
<li>Windows 環境下推薦使用<a href="https://rufus.ie/" target="_blank" rel="noopener">Rufus</a></li>
<li>就算你是 UEFI 電腦也別肖想全部 copy 過去就沒事了，一樣不能開機…<br>（因為 bootx64.efi 還要解開 img 檔案才有）</li>
</ul>
<p>然後就是開機安裝了，這部份應該不用教。<del>(幹勒自己寫的筆記教屁喔)</del></p>
<p>但是因為 18.04 之後的 mini 安裝環境的中文環境有 bug ，所以<strong>安裝要選擇英文安裝</strong></p>
<ul>
<li>這部份的 bug 你也可以在 Ubuntu Server 安裝的時候體驗到，畢竟安裝環境差不多</li>
</ul>
<p>對了，畢竟是最小安裝，所以出現軟體選擇的時候<strong>請跳過</strong></p>
<p>反正裝好了看到文字界面你就成功了</p>
<h2 id="安裝-Gnome"><a href="#安裝-Gnome" class="headerlink" title="安裝 Gnome"></a>安裝 Gnome</h2><p>會選擇 Gnome 當作桌面只是因為它在我這台電腦（Acer Aspire 3750G）最安定最順，而且我也不排斥。</p>
<p>不過說起來 Gnome 其實很肥…。<del>不管了裝就對了，穩比較重要（？</del></p>
<p>下以下指令就可以裝上去了  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install gnome-session gdm3</span><br></pre></td></tr></table></figure>

<ul>
<li>給只是想要 Gnome Vanilla 環境而查到這篇文章的人 :<ul>
<li>裝 <code>gnome-session</code> 就好，然後登出後去切換</li>
</ul>
</li>
<li>裝好之後別忘了安裝 <code>gnome-terminal</code> ，不然進入桌面環境之後沒終端機可以用</li>
<li>如果你打算在圖形界面下管理檔案…<ul>
<li>安裝檔案管理軟體<ul>
<li>個人是用用跟 Gnome 搭配的 Nautilus</li>
<li>安裝： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nautilus</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><del>選擇別裝圖形軟體，用 ls、cp、mv、rm 也是個好選擇啊</del></li>
</ul>
</li>
<li>如果你有打算開機的時候不要自動進入桌面的話…<ul>
<li>安裝 <code>xinit</code> 後你就可以用 <code>startx</code> 手動進入桌面</li>
</ul>
</li>
<li>如果你不喜歡 gdm 預設的紫色背景…<ul>
<li>下<br><code>sudo update-alternatives --config gdm3.css</code> 然後選擇<br><code>/usr/share/gnome-shell/theme/gnome-shell.css</code> 那一項<br>這樣登出之後應該就是 Gnome 預設的灰色了</li>
</ul>
</li>
</ul>
<h2 id="搞定中文字型支援-amp-安裝-fcitx"><a href="#搞定中文字型支援-amp-安裝-fcitx" class="headerlink" title="搞定中文字型支援 &amp; 安裝 fcitx"></a>搞定中文字型支援 &amp; 安裝 fcitx</h2><h3 id="中文字型支援"><a href="#中文字型支援" class="headerlink" title="中文字型支援"></a>中文字型支援</h3><p>打開 Language Support ，點「Install / Remove Languages…」<br>Chinese (tradition) 勾起來~</p>
<p><img src="/images/posts/ubuntu-mini/gnome-chinese-tradition.png" alt="gnome-chinese-tradition"></p>
<p>Apply 之後就完成了，如果有缺少檔案就麻煩他順便裝一裝。</p>
<h3 id="安裝-fcitx"><a href="#安裝-fcitx" class="headerlink" title="安裝 fcitx"></a>安裝 fcitx</h3><p>下指令安裝</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install fcitx fcitx-chewing</span><br></pre></td></tr></table></figure>

<p>裝好之後去 Fcitx Configuration 新增輸入法</p>
<p><img src="/images/posts/ubuntu-mini/fcitx-chewing-setting.png" alt="fcitx-chewing-setting"></p>
<p>記得把「Only Show Current Language」取消勾選，<br>如果你的 Ubuntu 語系不是中文的話，不然會看不到。</p>
<p>最後記得去 Language Support 把 「Keyboard input method system:」改成 fcitx<br>然後<strong>登出再登入</strong></p>
<p><img src="/images/posts/ubuntu-mini/languagesupport-fcitx-selected.png" alt="languagesupport-fcitx-selected.png"></p>
<h2 id="使用-Ubuntu-的懶人方法安裝-Nvidia-driver"><a href="#使用-Ubuntu-的懶人方法安裝-Nvidia-driver" class="headerlink" title="使用 Ubuntu 的懶人方法安裝 Nvidia driver"></a>使用 Ubuntu 的懶人方法安裝 Nvidia driver</h2><p>這就是我為什麼會選用 Ubuntu 當作我學習 Linux 的主力系統原因，<br>就是 Nvidia driver 太好裝了。只要點個幾個 GUI 界面就裝好，<br>還不需要去做額外設定就可以應付最基本的日常使用。</p>
<p>當然如果你有要用到 CUDA 等 Nvidia 附帶的運算功能，<br>那這個段落就毫無參考價值了。</p>
<h3 id="安裝-ubuntu-drivers"><a href="#安裝-ubuntu-drivers" class="headerlink" title="安裝 ubuntu-drivers"></a>安裝 ubuntu-drivers</h3><p>其實精簡安裝沒有附帶這好用的工具可以用，那就自己裝！  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">suod apt install ubuntu-drivers-common</span><br></pre></td></tr></table></figure>

<ul>
<li>然後這個好像不是官方附帶的那個…？<ul>
<li>沒事,照用（欸</li>
</ul>
</li>
</ul>
<p><img src="/images/posts/ubuntu-mini/ubuntu-drivers.png" alt="ubuntu-drivers"></p>
<p>先用 <code>ubuntu-drivers list</code> 確認有沒有找到你的 Nvidia 裝置，沒有就代表這方法行不通<br>如果有找到的話， <code>sudo ubuntu-drivers install</code> 輸入下去讓他幫你跑完。<br>跑完之後再重開機，你的 Nvidia 顯示卡就可以使用了。</p>
<h2 id="zsh-安裝與-tty-辛酸史"><a href="#zsh-安裝與-tty-辛酸史" class="headerlink" title="zsh 安裝與 tty 辛酸史"></a>zsh 安裝與 tty 辛酸史</h2><p>這我打算開一篇新文章專門講這些事，敬請期待～<br><del>（因為受傷害太深所以先不要馬上寫）</del></p>
<h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>老實說 Ubuntu 本身就不怎麼精簡了，所以這樣的裝法可能無法精簡太多。<br>但至少你有比較大的彈性安裝你自己想要的套件，<br>而不是被 <code>ubuntu-desktop</code> 強塞一堆<del>垃圾</del>。</p>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://itsfoss.com/vanilla-gnome-ubuntu/" target="_blank" rel="noopener">Getting Real GNOME Back in Ubuntu 18.04 [Quick Tip]</a> by It’s FOSS<br><a href="http://samwhelp.github.io/book-ubuntu-qna/read/case/driver/install-driver-package/ubuntu-drivers" target="_blank" rel="noopener">如何使用「ubuntu-drivers」這個指令，來輔助安裝驅動程式套件</a> by Ubuntu 問答集</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Arch Linux 底下安裝 LINE 的筆記（使用 Wine）</title>
    <url>/2020/05/archlinux-wine-line-note.html</url>
    <content><![CDATA[<p><a href="https://hackmd.io/@nesquate/note-for-archlinux-wine-line" target="_blank" rel="noopener">HackMD 重點整理版</a><br><em>（其實內容差不多）</em></p>
<p>會寫這篇文主要是紀錄一下我在 Arch Linux 底下安裝 Wine 與 LINE 的過程，以作為之後的參考。<br>因為在 Ubuntu 底下安裝之後遇到不少問題，像是字體問題就是令我非常頭大的事情。</p>
<p>我原本是先寫好 HackMD 筆記，想說公開丟著不管它好了，但是我想到我的部落格文章非常少，只好……。</p>
<a id="more"></a>

<h2 id="開啟-multilib-軟體庫"><a href="#開啟-multilib-軟體庫" class="headerlink" title="開啟 multilib 軟體庫"></a>開啟 multilib 軟體庫</h2><p>因為 LINE 需要 Wine 32 Bit 才能使用，所以要把 32 位元的軟體庫（<code>multilib</code>）給開起來</p>
<p>打開 <code>/etc/pacman.conf</code> 並且取消註解這兩行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[multilib]</span><br><span class="line">Include &#x3D; &#x2F;etc&#x2F;pacman.d&#x2F;mirrorlist</span><br></pre></td></tr></table></figure>

<p>如果 LINE 可以在純 64 位元底下執行就好了，<br>不過看起來 LINE 目前還是用 32 位元編譯（為了相容性）</p>
<p>最後輸入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -Sy</span><br></pre></td></tr></table></figure>
<p>更新本地軟體庫</p>
<h2 id="安裝-Wine-與-Winetricks"><a href="#安裝-Wine-與-Winetricks" class="headerlink" title="安裝 Wine 與 Winetricks"></a>安裝 Wine 與 Winetricks</h2><p>順邊裝個 Winetricks 比較好管理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo pacman -S wine</span><br><span class="line">sudo pacman -S winetricks</span><br></pre></td></tr></table></figure>

<h2 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h2><h3 id="建立-Wine-32-環境"><a href="#建立-Wine-32-環境" class="headerlink" title="建立 Wine 32 環境"></a>建立 Wine 32 環境</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WINEARCH=win32 wincfg</span><br><span class="line"><span class="comment"># 如果你要自訂其他路徑的話</span></span><br><span class="line">WINEARCH=win32 WINEPREFIX=~/win32 winecfg</span><br></pre></td></tr></table></figure>

<h3 id="安裝-Visual-C-Runtime-2008"><a href="#安裝-Visual-C-Runtime-2008" class="headerlink" title="安裝 Visual C++ Runtime 2008"></a>安裝 Visual C++ Runtime 2008</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">winetricks vcrun2008</span><br></pre></td></tr></table></figure>

<h3 id="安裝-LINE"><a href="#安裝-LINE" class="headerlink" title="安裝 LINE"></a>安裝 LINE</h3><ul>
<li>Gnome的作法<ul>
<li>以其他應用程式開啟 -&gt; Wine Program Loader  </li>
</ul>
</li>
<li>終端機的作法： <code>wine LineInst.exe</code></li>
</ul>
<h2 id="然後就沒有了？！"><a href="#然後就沒有了？！" class="headerlink" title="然後就沒有了？！"></a>然後就沒有了？！</h2><p>沒想到在 Arch Linux 搭配最新版的 LINE 與 Wine 居然沒什麼問題？！<br>Ubuntu 還有字體問題，<del>果然是包袱越重問題越多嗎</del></p>
<h2 id="後記：Linux-悲歌"><a href="#後記：Linux-悲歌" class="headerlink" title="後記：Linux 悲歌"></a>後記：Linux 悲歌</h2><p>首先，不得不說我非常不喜歡用 LINE，<br>要不是跟現實妥協我還真的是不會用它，連碰都不想碰。</p>
<p>再來，消費者面向的軟體在 Linux 非常非常缺乏，<br>要不然就是，雖然有但是程式可用的功能跟 Windows/macOS 差異頗大。</p>
<p>舉例來說，<br>Microsoft Office？沒上（只有上 Teams 而且還是 Beta？！）<br>Edge Chromium？還沒上（到底要什麼時候才上啊？）<br>還有本篇的 LINE。</p>
<p>只能說這真的是 Linux 悲歌了吧…。</p>
<h2 id="參考文件"><a href="#參考文件" class="headerlink" title="參考文件"></a>參考文件</h2><ul>
<li><a href="https://wiki.archlinux.org/index.php/Wine_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">Wine from Arch Linux Wiki</a></li>
<li><a href="https://blog.xuite.net/d93921012/twblog/252066321-%E5%9C%A8+WINE+%E4%B8%8A%E4%BD%BF%E7%94%A8+LINE" target="_blank" rel="noopener">在 WINE 上使用 LINE</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Arch Linux</tag>
        <tag>Wine</tag>
        <tag>Line</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 與 在 Tomcat 上的 Jenkins - 01 緣由以及規劃</title>
    <url>/2020/05/hexo-with-tomcat-jenkins-01.html</url>
    <content><![CDATA[<h2 id="事由"><a href="#事由" class="headerlink" title="事由"></a>事由</h2><p>之前有用過 Travis CI 對自己網站的 Hexo 進行持續整合，整個設定不會太困難，照網路上教學走就好了。</p>
<p>不過後來還是不用 Travis CI 來對 Hexo 進行 Deploy 了，主要是因為：</p>
<ol>
<li>我現在的網站有 Disqus 留言板可以給大家留言，Disqus 的留言板要綁 API Key 才可以使用，API Key 不是可以隨意洩漏的東西。（那時候我的 Hexo repo 是公開的）</li>
<li>那這樣來說，把整個 repo 設成 Private 不就好了？然而這樣就沒辦法使用 Travis CI 免費版了，付費版每個月 69 鎂起（截至 2020-05-31 ），窮學生無法負擔。</li>
<li>重新規劃 - 我之前是把整個 Hexo 檔案丟上去，感覺一點都不 CI/CD。</li>
</ol>
<p>出於以上原因就想說乾脆整個重來好了，<del>沒想到連網站也一起幾乎重來了</del>。</p>
<a id="more"></a>

<p>不過會使用到 CI/CD 現階段不是要在 Hexo 上做開發，而是<strong>備份</strong>。因為現在放 Hexo 檔案的電腦系統是 Arch Linux ，這系統很容易滾動更新到假死，甚至是真的掛點，所以我還是早早備份比較實在。</p>
<h2 id="Tomcat-與-Jenkins"><a href="#Tomcat-與-Jenkins" class="headerlink" title="Tomcat 與 Jenkins"></a>Tomcat 與 Jenkins</h2><p>這兩個玩意都是第一次碰到。Apache Tomcat 是 JavaServer 容器系統，而 Jenkins 是 CI （持續整合）工具。</p>
<p>Jenkins 不少專案都有使用它，例如 Minecraft Spigot 知名基礎插件 <a href="https://github.com/EssentialsX/Essentials" target="_blank" rel="noopener">EssentialsX</a> 。<br>但是我第一時間並沒有想到它，直到社團的同學買了 OVH VPS 並在上面架設 Jenkins 之後我才想到還可以這樣玩（當然我也買了 VPS 了）。</p>
<p>而 Jenkins 需要類似 Apache Tomcat 的容器系統，雖然在 Ubuntu 上想要單純用 Jenkins 就直接 <code>sudo apt install jenkins</code> 就好了，不過考量到大二的時候需要寫 Java ，於是決定 <em>超前部署</em> ，先把 Tomcat 裝起來， Jenkins 直接在上面執行就好了。</p>
<h2 id="重新規劃"><a href="#重新規劃" class="headerlink" title="重新規劃"></a>重新規劃</h2><p>原本想說又是把整個 Hexo 程式丟上去，Jenkins 部署這樣就大功告成，但是這樣有幾個問題：</p>
<ul>
<li>全部的 Commit（包含新增文章、佈景主題的修改）都會混在一起。以我的粗心程度可能要到所有事情都做完了才會發現哪裡改壞了，然後 Revert 整個 Hexo 程式 repo ，我會欲哭無淚。<ul>
<li>那用 Branch 呢？似乎是個辦法，不過我沒有選擇這麼做。</li>
</ul>
</li>
<li>CI/CD 模擬演練（雖然實際弄下來不太是正確的 CI/CD 架構就是了）</li>
</ul>
<p>所以我就規劃程這樣：</p>
<ul>
<li>Hexo 本體 - 包含主體設定檔（<code>_config.yml</code>）、鷹架（scaffolds）、沒有用到的文章</li>
<li>Hexo source 資料夾 - 裡面有所有的文章和圖片，以及Github 需要的 CNAME 檔案</li>
<li>Hexo Next 佈景主題 - 我在 clone 這個佈景主題下來的時候本身就有 Git 控制了，就繼續沿用 </li>
</ul>
<p>source 資料夾以及 Next 佈景主題在後面會利用 <code>git submodule</code> 來處理。</p>
<p>然後以下是整個 repo 與 Jenkins 關係的超簡略架構圖：<br><img src="/images/posts/hexo_jenkins/hexo_with_Jenkins.png" alt="Hexo_and_Jenkins"></p>
<p>從我最後實做出來的結果，大致上來說：</p>
<ul>
<li>Hexo 本體、Hexo source 與 Hexo Next 佈景主題的 repo 是母子關係，source 與 Next 佈景主題最後還是要在 Jenkins 底下合併且進行 Hexo deploy</li>
<li>Hexo source 與 Hexo Next 佈景主題的 repo 有任何的 push ，WebHook 會呼叫 Jenkins 進行三個 Hexo 相關的 repo 進行整合（就 submodule update）</li>
<li>當整個 Hexo 本體有變動的時候，WebHook 呼叫 Jenkins 進行 Hexo deploy</li>
</ul>
<p>就這樣，然後這架構讓我搞了一整天，累死。</p>
<h2 id="終究免不了要用-VPS-（花錢）"><a href="#終究免不了要用-VPS-（花錢）" class="headerlink" title="終究免不了要用 VPS （花錢）"></a>終究免不了要用 VPS （花錢）</h2><p>你最後還是得花錢啦，但是已經比 Trivas CI 便宜太多了。</p>
<p>OVH VPS 最便宜的方案 $3.5 鎂 / 月，而且你還可以玩其他東西，是真的很便宜。</p>
<p>而且它也給了 2GB RAM ，基本上掛 Tomcat 是有餘力的。</p>
<h2 id="Let’s-GO"><a href="#Let’s-GO" class="headerlink" title="Let’s GO!"></a>Let’s GO!</h2><p><em>以下是文章索引，可以快速跳轉到系列文相關的文章</em>  </p>
<ul>
<li><strong>01 緣由以及規劃</strong></li>
<li><a href="/2020/06/hexo-with-tomcat-jenkins-02.html">02 使用 Git Submodule 分家</a></li>
<li><a href="/2020/06/hexo-with-tomcat-jenkins-03.html">03 安裝 Tomcat 與 Jenkins</a></li>
<li><a href="">04 Jenkins 與 Node.js</a></li>
<li><a href="">05 設定 Jenkins 與 Github 連線</a></li>
<li><a href="">番外 01 : 使用 Nginx 反向代理</a></li>
<li><a href="">番外 02 : systemd 與它的保護機制</a></li>
<li><a href="">終 結論以及遇到的問題</a></li>
</ul>
]]></content>
      <categories>
        <category>WebApp</category>
      </categories>
      <tags>
        <tag>Hexo, Tomcat, Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 與 在 Tomcat 上的 Jenkins - 02 使用 Git Submodule 分家</title>
    <url>/2020/06/hexo-with-tomcat-jenkins-02.html</url>
    <content><![CDATA[<h2 id="幹話繼續說"><a href="#幹話繼續說" class="headerlink" title="幹話繼續說"></a>幹話繼續說</h2><p><a href="/2020/05/hexo-with-tomcat-jenkins-01.html">上一篇</a>討論了我是怎麼規劃以及希望借助 Tomcat 與 Jenkins 的力量來達成 CI/CD 部署，那這一篇來討論 Git 的其中一個機制 - Submodule，</p>
<p>Submodule 應用在當開發的 repo 切得很細很細時，可以方便將所有 repo 整合至主線 repo。<br>用意是這樣沒錯啦…但是老實說我用起來滿不方便的。</p>
<ul>
<li>首先就是更新的部份吧，如果要更新到主線 repo <strong>還要對主線 repo submodule update 以及 commit</strong></li>
<li>再來是 <code>git clone</code> 的部份，如果要把包含 submodule 的 repo 一起抓下來，還要再把指令修改成 <code>git clone --recursive &lt;repo url&gt;</code>，奇怪 git 怎麼不偵測有 <code>.gitmodule</code> 這個檔案就預設執行 recursive 呢？</li>
</ul>
<p>對我這個懶人來說，這兩點就足以讓我懶惰症發作了。</p>
<a id="more"></a>

<h2 id="具體步驟"><a href="#具體步驟" class="headerlink" title="具體步驟"></a>具體步驟</h2><ol>
<li>因為我還沒有對 Hexo 資料夾做 git repo ，所以我先 <code>git init</code>，然後再來 <code>git add .</code></li>
</ol>
<p>然而事情看起來沒那麼順利：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">warning: 正在新增嵌入式 git 版本庫：themes/next</span><br><span class="line">提示：You<span class="string">'ve added another git repository inside your current repository.</span></span><br><span class="line"><span class="string">提示：Clones of the outer repository will not contain the contents of</span></span><br><span class="line"><span class="string">提示：the embedded repository and will not know how to obtain it.</span></span><br><span class="line"><span class="string">提示：If you meant to add a submodule, use:</span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string">提示：	git submodule add &lt;url&gt; themes/next</span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string">提示：If you added this path by mistake, you can remove it from the</span></span><br><span class="line"><span class="string">提示：index with:</span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string">提示：	git rm --cached themes/next</span></span><br><span class="line"><span class="string">提示：</span></span><br><span class="line"><span class="string">提示：See "git help submodule" for more information.</span></span><br></pre></td></tr></table></figure>
<p>看起來是 Next 主題的問題，<br>因為我當初在設定 Next 主題的時候是直接把整個 Next 主題的 repo 給 clone 下來的。<br>不過這也沒關係，反正他說啥就照用就好。</p>
<ol start="2">
<li>對想要 submodule 化的資料夾取消 Git Track</li>
</ol>
<p>我想要對 <code>source</code> 與 <code>theme/next</code> 資料夾內的資料 submodule 化，那我自然就取消這兩個，<br>不然 git 會跟你說已經在追蹤了不給加。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git rm --cahced themes/next <span class="comment"># 取消追蹤 Next 主題</span></span><br><span class="line">git rm --cached <span class="built_in">source</span> <span class="comment"># 取消追蹤 source 資料夾</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>新增 Git repo 網址與 submodule 進行對映</li>
</ol>
<p>大概就是這樣：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git submodule add &lt;私人 repo 地址&gt; themes/next</span><br></pre></td></tr></table></figure>
<p>source 資料夾也是如法炮製，但是除了這個之外也請確保各個 submodule 下的 git 遠端位置也是在那裡。<br>（用 <code>git remote</code> 查看）</p>
<div class="note warning">
            <h3 id="確保通訊協定的一致性"><a href="#確保通訊協定的一致性" class="headerlink" title="確保通訊協定的一致性"></a>確保通訊協定的一致性</h3><p>如果你 repo 遠端連線的方式是 https ，那在做網址對應的時候就都用 https，<br>而如果是 SSH 則都是 SSH ，<strong>不要混用</strong>，不然在後續 Jenkins 設定的時候會出現驗證問題。</p>
          </div>

<ol start="4">
<li>通通上傳</li>
</ol>
<p>先對各個 submodule 做 <code>git push</code> 再對主線 repo 進行 <code>git commit</code> 以及 <code>git push</code>。</p>
<ol start="5">
<li>要 <code>git clone</code> 回來，別忘記加上 <code>--recursive</code></li>
</ol>
<p>不然你只會得到空的資料夾。</p>
<p>經過這些步驟，我已經成功把 source 和 Next 主題與 Hexo 本體分家了。</p>
<h2 id="Let’s-GO"><a href="#Let’s-GO" class="headerlink" title="Let’s GO!"></a>Let’s GO!</h2><p><em>以下是文章索引，可以快速跳轉到系列文相關的文章</em>  </p>
<ul>
<li><a href="/2020/05/hexo-with-tomcat-jenkins-01.html">01 緣由以及規劃</a></li>
<li><strong>02 使用 Git Submodule 分家</strong></li>
<li><a href="/2020/06/hexo-with-tomcat-jenkins-03.html">03 安裝 Tomcat 與 Jenkins</a></li>
<li><a href="">04 Jenkins 與 Node.js</a></li>
<li><a href="">05 設定 Jenkins 與 Github 連線</a></li>
<li><a href="">番外 01 : 使用 Nginx 反向代理</a></li>
<li><a href="">番外 02 : systemd 與它的保護機制</a></li>
<li><a href="">終 結論以及遇到的問題</a></li>
</ul>
]]></content>
      <categories>
        <category>WebApp</category>
      </categories>
      <tags>
        <tag>Hexo, Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 與 在 Tomcat 上的 Jenkins - 03 安裝 Tomcat 與 Jenkins</title>
    <url>/2020/06/hexo-with-tomcat-jenkins-03.html</url>
    <content><![CDATA[<h2 id="近況"><a href="#近況" class="headerlink" title="近況"></a>近況</h2><p>最近實在是很忙，忙到沒時間寫這個系列文，<br>大概也就是今天比較有空了吧，就趕快來寫一寫。</p>
<p>這篇開始應該就比較是真正進入核心重點的內容了，<br>那麼我們就接著看下去。</p>
<h2 id="操作環境"><a href="#操作環境" class="headerlink" title="操作環境"></a>操作環境</h2><ul>
<li>Ubuntu Server 20.04</li>
<li>Apache Tomcat 9</li>
<li>Jenkins 2.222.4 (LTS)</li>
</ul>
<p>其他版本應該都大同小異…吧。</p>
<a id="more"></a>

<h2 id="安裝-Tomcat-9"><a href="#安裝-Tomcat-9" class="headerlink" title="安裝 Tomcat 9"></a>安裝 Tomcat 9</h2><p>下這個指令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install tomcat9</span><br></pre></td></tr></table></figure>

<p>apt 會幫你把 Tomcat 需要的 Java 以及一些設定都幫你弄好了。<del>至少不會像 Arch Linux 還要自己設定啦</del></p>
<p>安裝好之後， Tomcat 預設的 Port 號是 8080 ，請確定防火牆有開啟對映的 Port 號，或是設定好 HTTP Server 反向代理。</p>
<p>連上去會長這樣：<br><img src="/images/posts/hexo_jenkins/hexo_with_jenkins_tomcat.png" alt="hexo_with_jenkins_tomcat"></p>
<h3 id="安裝與設定管理控制台"><a href="#安裝與設定管理控制台" class="headerlink" title="安裝與設定管理控制台"></a>安裝與設定管理控制台</h3><p>網頁底下表示還有其他相關套件可以安裝，那我們順便把 <code>tomcat9-admin</code> 給裝一下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install tomcat9-admin</span><br></pre></td></tr></table></figure>

<p>這樣就會有管理控制台了，但是你會發現沒有使用者會登入不進去，<br>所以這時候需要給一個使用者讓我們能夠管理 Tomcat 。</p>
<p>打開 <code>/etc/tomcat9/tomcat-users.xml</code> 加入下列內容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">下面這行才是要新增的東西</span></span><br><span class="line"><span class="comment">上面和最底部檔案裡面有了</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"想要的 Username"</span> <span class="attr">password</span>=<span class="string">"想要的密碼"</span> <span class="attr">roles</span>=<span class="string">"manager-gui, admin-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>改完之後記得<strong>重啟 Tomcat</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart tomcat9</span><br></pre></td></tr></table></figure>

<p>這樣就可以登入控制台了。<br>有了控制台就可以只對 Jenkins 進行停止運作的操作，而不用整個 Tomcat 都停止。</p>
<p><img src="/images/posts/hexo_jenkins/tomcat_manager_gui.png" alt="tomcat_manager_gui"></p>
<h2 id="安裝-Jenkins"><a href="#安裝-Jenkins" class="headerlink" title="安裝 Jenkins"></a>安裝 Jenkins</h2><p>下載 Jenkins 的 war 檔案，相關檔案可以在 <a href="https://www.jenkins.io/download/" target="_blank" rel="noopener">Jenkins 官網下載區</a>找到。</p>
<p>然後就可以用 curl 或 wget 的指令把它抓下來：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -O http://mirror.serverion.com/jenkins/war-stable/2.222.4/jenkins.war</span><br></pre></td></tr></table></figure>

<p>記得把 jenkins.war 複製到 <code>/var/lib/tomcat9/webapps/</code> ，讓 Tomcat Deploy。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo cp jenkins.war /var/lib/tomcat9/webapps/</span><br></pre></td></tr></table></figure>

<p>然後瀏覽到 Jenkins 底下的子目錄，就發現權限不足的訊息了。</p>
<p><img src="/images/posts/hexo_jenkins/jenkins_install_no_permit.png" alt="jenkins_install_no_permit"></p>
<h3 id="解決權限不足的問題"><a href="#解決權限不足的問題" class="headerlink" title="解決權限不足的問題"></a>解決權限不足的問題</h3><p>上面那張圖其實有兩個問題：</p>
<ul>
<li>權限不足 -&gt; 後來發現是 systemd 的問題</li>
<li>路徑錯誤 -&gt; jenkins 相關資料放在根目錄並不安全</li>
</ul>
<p>逐步修正：</p>
<ol>
<li>利用 Jenkins 環境變數把 JENKINS_HOME 的位置改變</li>
</ol>
<p>開啟 <code>/etc/tomcat9/context.xml</code> 檔案，加入以下內容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Environment</span> <span class="attr">name</span>=<span class="string">"JENKINS_HOME"</span> <span class="attr">value</span>=<span class="string">"/path/to/jenkins_home/"</span> <span class="attr">type</span>=<span class="string">"java.lang.String"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>你可以把 <code>/path/to/jenkins_home/</code> 改成你想要的地方，總而言之不要 root 就對了。<br>如果該資料夾目前不存在，<strong>記得先新增</strong>以免 systemd 出現問題。<br>還有要把相關資料夾指定成 tomcat 的使用者與群組：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown -R tomcat:tomcat jenkins_home/</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>systemd service 檔案修正</li>
</ol>
<p>相關檔案在 <code>/lib/systemd/system/tomcat9.service</code> ，把它打開來並且在 <code># Security</code> 的段落加入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ReadWritePaths&#x3D;&#x2F;path&#x2F;to&#x2F;jenkins_home&#x2F;</span><br></pre></td></tr></table></figure>

<p>存檔並：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload <span class="comment"># 重新載入 service 檔案</span></span><br><span class="line">sudo systemctl restart tomcat9 <span class="comment"># 重啟 Tomcat</span></span><br></pre></td></tr></table></figure>

<h3 id="繼續安裝"><a href="#繼續安裝" class="headerlink" title="繼續安裝"></a>繼續安裝</h3><p>看一下瀏覽器，就依照它的步驟進行就好：<br><img src="/images/posts/hexo_jenkins/jenkins_install_01.png" alt="jenkins_install_01"><br><img src="/images/posts/hexo_jenkins/jenkins_install_02.png" alt="jenkins_install_02"><br><img src="/images/posts/hexo_jenkins/jenkins_install_03.png" alt="jenkins_install_03"><br><img src="/images/posts/hexo_jenkins/jenkins_install_04.png" alt="jenkins_install_04"><br><img src="/images/posts/hexo_jenkins/jenkins_install_05.png" alt="jenkins_install_05"><br><img src="/images/posts/hexo_jenkins/jenkins_install_06.png" alt="jenkins_install_06"><br><img src="/images/posts/hexo_jenkins/jenkins_install_07.png" alt="jenkins_install_07"></p>
<h2 id="Let’s-GO"><a href="#Let’s-GO" class="headerlink" title="Let’s GO!"></a>Let’s GO!</h2><p><em>以下是文章索引，可以快速跳轉到系列文相關的文章</em>  </p>
<ul>
<li><a href="/2020/05/hexo-with-tomcat-jenkins-01.html">01 緣由以及規劃</a></li>
<li><a href="/2020/06/hexo-with-tomcat-jenkins-02.html">02 使用 Git Submodule 分家</a></li>
<li><strong>03 安裝 Tomcat 與 Jenkins</strong></li>
<li><a href="">04 Jenkins 與 Node.js</a></li>
<li><a href="">05 設定 Jenkins 與 Github 連線</a></li>
<li><a href="">番外 01 : 使用 Nginx 反向代理</a></li>
<li><a href="">番外 02 : systemd 與它的保護機制</a></li>
<li><a href="">終 結論以及遇到的問題</a></li>
</ul>
]]></content>
      <categories>
        <category>WebApp</category>
      </categories>
      <tags>
        <tag>Hexo, Tomcat, Jenkins</tag>
      </tags>
  </entry>
</search>
